{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["import { MessageBot } from '@bhmb/bot'\r\nimport { UIExtensionExports } from '@bhmb/ui'\r\nimport { WorldInfo, WorldLists } from 'blockheads-api/api'\r\n\r\nimport step1Html from './step1.html'\r\nimport step2Html from './step2.html'\r\nimport step3Html from './step3.html'\r\n\r\ninterface SortSettings {\r\n  alphabetical: boolean\r\n  removeDuplicates: boolean\r\n}\r\n\r\ninterface PushSettings {\r\n  mode: 'overwrite' | 'append'\r\n}\r\n\r\nconst pluck = <T, K extends keyof T>(arr: T[], key: K): Array<T[K]> => arr.map(item => item[key])\r\nconst flatten = <T>(arr: T[][]): T[] => arr.reduce((carry, item) => carry.concat(item), [])\r\n\r\nasync function getWorldLists(world: WorldInfo) {\r\n  let api = new MessageBot.dependencies.Api(world)\r\n  let overview = await api.getOverview()\r\n  while ((overview as any).status != 'online') {\r\n    await api.start()\r\n    overview = await api.getOverview()\r\n  }\r\n  return api.getLists()\r\n}\r\n\r\nfunction unique(arr: string[]) {\r\n  let seen = new Set()\r\n  return arr.filter((item) => {\r\n    if (!seen.has(item.toLocaleUpperCase())) {\r\n      seen.add(item.toLocaleUpperCase())\r\n      return true\r\n    }\r\n  })\r\n}\r\n\r\nasync function createUI(list: keyof WorldLists, tab: HTMLDivElement, ui: UIExtensionExports) {\r\n  // Show worlds\r\n  let { worlds, settings } = await showWorlds(tab, ui)\r\n\r\n  // Get the lists and modify as required\r\n  ui.notify('Getting lists')\r\n  let lists = await Promise.all(worlds.map(getWorldLists))\r\n  let superList = flatten(pluck(lists, list))\r\n  if (settings.alphabetical) superList.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))\r\n  if (settings.removeDuplicates) superList = unique(superList)\r\n\r\n  // Let the user edit the list\r\n  superList = await displayList(tab, superList)\r\n\r\n  // Choose which worlds to push the new list to\r\n  let { worlds: pushWorlds, settings: pushSettings } = await choosePushWorlds(tab, ui)\r\n  ui.notify('Pushing lists...')\r\n  let requests = pushWorlds.map(async world => {\r\n    let api = new MessageBot.dependencies.Api(world)\r\n    let lists = await getWorldLists(world)\r\n    pushSettings.mode == 'overwrite' ? lists[list] = superList : lists[list].push(...superList)\r\n    await api.setLists(lists)\r\n  })\r\n\r\n  await Promise.all(requests)\r\n  setTimeout(createUI, 1, list, tab, ui)\r\n}\r\n\r\n// Todo: Extract the common functionality in showWorlds / choosePushWorlds into a helper function\r\n\r\nasync function showWorlds(tab: HTMLDivElement, ui: UIExtensionExports): Promise<{worlds: WorldInfo[], settings: SortSettings}> {\r\n  let worlds = await MessageBot.dependencies.getWorlds()\r\n  tab.innerHTML = step1Html\r\n  let worldsDiv = tab.querySelector('.worlds') as HTMLDivElement\r\n  let template = tab.querySelector('template') as HTMLTemplateElement\r\n  worlds.forEach(world => {\r\n    ui.buildTemplate(template, worldsDiv, [\r\n      { selector: '[data-for=worldId]', value: world.id },\r\n      { selector: '[data-for=worldName]', text: world.name }\r\n    ])\r\n  })\r\n\r\n  return new Promise <{ worlds: WorldInfo[], settings: SortSettings }>(resolve => {\r\n    let button = tab.querySelector('.button') as HTMLElement\r\n    button.addEventListener('click', () => {\r\n      let ids = Array.from(worldsDiv.querySelectorAll('input'))\r\n        .filter(input => input.checked)\r\n        .map(input => input.value)\r\n\r\n      if (ids.length < 1) {\r\n        ui.notify('Please select at least one world')\r\n        return\r\n      }\r\n\r\n      let settings: SortSettings = {\r\n        alphabetical: (tab.querySelector('[name=alphabeta]') as HTMLInputElement).checked,\r\n        removeDuplicates: (tab.querySelector('[name=duplicates]') as HTMLInputElement).checked,\r\n      }\r\n\r\n      resolve({ worlds: worlds.filter(({id}) => ids.includes(id)), settings })\r\n    })\r\n  })\r\n}\r\n\r\nfunction displayList(tab: HTMLDivElement, list: string[]): Promise<string[]> {\r\n  tab.innerHTML = step2Html\r\n  let textarea = tab.querySelector('textarea') as HTMLTextAreaElement\r\n  let button = tab.querySelector('.button') as HTMLElement\r\n  textarea.textContent = list.join('\\n')\r\n  return new Promise<string[]>(resolve => {\r\n    button.addEventListener('click', () => resolve(textarea.value.split(/\\r?\\n/)))\r\n  })\r\n}\r\n\r\nasync function choosePushWorlds(tab: HTMLDivElement, ui: UIExtensionExports): Promise<{worlds: WorldInfo[], settings: PushSettings }> {\r\n  tab.innerHTML = step3Html\r\n  let worlds = await MessageBot.dependencies.getWorlds()\r\n  let worldsDiv = tab.querySelector('.worlds') as HTMLDivElement\r\n  let template = tab.querySelector('template') as HTMLTemplateElement\r\n  worlds.forEach(world => {\r\n    ui.buildTemplate(template, worldsDiv, [\r\n      { selector: '[data-for=worldId]', value: world.id },\r\n      { selector: '[data-for=worldName]', text: world.name }\r\n    ])\r\n  })\r\n\r\n  return new Promise<{ worlds: WorldInfo[], settings: PushSettings }>(resolve => {\r\n    let button = tab.querySelector('.button') as HTMLElement\r\n    button.addEventListener('click', () => {\r\n      let ids = Array.from(worldsDiv.querySelectorAll('input'))\r\n        .filter(input => input.checked)\r\n        .map(input => input.value)\r\n\r\n      if (ids.length < 1) {\r\n        ui.notify('Please select at least one world')\r\n        return\r\n      }\r\n\r\n      let settings: PushSettings = {\r\n        mode: (tab.querySelector('[name=mode]:checked') as HTMLInputElement).value as 'overwrite' | 'append',\r\n      }\r\n\r\n      resolve({ worlds: worlds.filter(({ id }) => ids.includes(id)), settings })\r\n    })\r\n  })\r\n}\r\n\r\n\r\nMessageBot.registerExtension('bibliofile/lists', function(ex) {\r\n  const ui = ex.bot.getExports('ui') as UIExtensionExports | undefined\r\n  if (!ui) return\r\n  const listId = 'bibliofile/lists'\r\n  ui.addTabGroup('Lists', listId)\r\n  ex.remove = () => ui.removeTabGroup(listId)\r\n\r\n  createUI('adminlist', ui.addTab('Adminlist', listId), ui)\r\n  createUI('modlist', ui.addTab('Modlist', listId), ui)\r\n  createUI('whitelist', ui.addTab('Whitelist', listId), ui)\r\n  createUI('blacklist', ui.addTab('Blacklist', listId), ui)\r\n})\r\n"],"names":["MessageBot"],"mappings":"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"}